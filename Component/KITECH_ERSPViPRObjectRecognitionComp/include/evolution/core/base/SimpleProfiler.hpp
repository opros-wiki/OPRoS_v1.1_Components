//  Copyright (C) 2001-2007, Evolution Robotics, Inc.
//  Any reproduction is strictly prohibited without the explicit
//  written permission of Evolution Robotics, Inc.  All rights reserved.


/**
 * @file    evolution/behaviors/navigation/SimpleProfiler.hpp
 * @brief   Macros that manage a simple profiler
 * @author  Copyright (C) 2001-2007, Evolution Robotics, Inc.
 **/
#ifndef INCLUDE_EVOLUTION_SIMPLEPROFILER_HPP
#define INCLUDE_EVOLUTION_SIMPLEPROFILER_HPP


#include <evolution/core/base/Platform.hpp>
#include <assert.h>

#ifndef DOXYGEN_INTERNAL

/* Usage

Use the macros in Logging.hpp for the ERSP usage.


MACROS

STARTSIMPLEPROFILER        - Put once at the start of application file (main).
OPENSIMPLEPROFILER         - Opens profile log put at beginning of main(). File is named SimpleProfile.log.
CLOSESIMPLEPROFILER        - Close profiler. Put at end of main.
STARTSIMPLEPROFILERSECTION - Starts a section to profile. A section is nested and indicated with a SN:
                             N indicating the nest level. String passed labels the section.
ENDSIMPLEPROFILESECTION    - Ends the level. Pass same string as start of a section.
STARTDERIVEDSIMPLEPROFILERSECTION - Starts a derived time section to profile. The time is generated by the user
ENDDERIVEDSIMPLEPROFILESECTION    - Ends the derived level. Pass same string as start of a section.
LOGTIMESIMPLEPROFILER      - Logs the time at this location, but does not create a level.
PRINTSIMPLEPROFILER        - Prints string to profile log. Use this or AR1,AR2 version to pass args.


Configuration (run time)

SPData.MaxProfilerLevel    - Set this to the maximum section level to log.
SPData.MaxLogDiffTimeLevel - Set this to report the time diff of a section.

Compile time configuration is below.
*/



#define USESIMPLEPROFILER            1  //Undefine this to get rid of all traces of the profiler.
#define SIMPLEPROFILERLEVELDEFAULT  20 //The level to report profiling. Level 0 is no output.

#define SIMPLEPROFILERDIFFLEVELMAX   1 //The level to output diffs of two pass compile flag ---do not use
//#define SIMPLEPROFILERLOWOVERHEAD    1 //Run the profiler to capture labels
                                       //then run this to capture times, paste together in excel
//#define MAXPROFILERLINES         10000 //Creates  buffer of doubles if capturing times.

//How to get time.
#define GETTIME Platform::get_microsecond_time()


#if defined(EVOLUTION_SUPPORT_POSIX_THREADS) //if supported
//do not use #define USEMUTEX //Define this to protect section start and end from preemption.
#endif  //Defined(EVOLUTION_SUPPORT_POSIX_THREADS)

#ifdef USEMUTEX 

#define CREATEMUTEX \
    if(pthread_mutex_init (&sSiProData.mutex, 0) != 0); \
    { \
        ERSP_LOG_WARN("Error creating mutex for simple profiler"); \
        return(1); \
    } #endif 

#else
#define CREATEMUTEX
#endif  //USEMUTEX 





typedef struct tagSimpleProfilerData
{
    FILE *fProfileLog;
    double dStartTime;
    unsigned int uiMaxProfilerLevel; //Do not log less than this level
    unsigned int uiCurrentProfilerLevel;
    double dTimeDiffLevel[SIMPLEPROFILERLEVELDEFAULT];
    unsigned int uiMaxLogDiffTimeLevel;
    unsigned int uiLineNumber;
#ifdef SIMPLEPROFILERLOWOVERHEAD 
    unsigned int uiCurrentBufIndex;
    double dTimeBuf[MAXPROFILERLINES]; 
#endif
  //Not used. pthread_mutex_t mutex; //Used if profiling threads that can preempt the sections.
}SIMPLEPROFILERDATA;

//Include at beginning of main app file.
#define STARTSIMPLEPROFILER \
EVOLUTION_EXPORT_BASE SIMPLEPROFILERDATA sSiProData; \
EVOLUTION_EXPORT_BASE SIMPLEPROFILERDATA *pSiProData = NULL;


//Include at beginning of main app file.
#define EXTERNSIMPLEPROFILER \
extern EVOLUTION_EXPORT_BASE SIMPLEPROFILERDATA sSiProData; \
extern EVOLUTION_EXPORT_BASE SIMPLEPROFILERDATA *pSiProData;

//Include after main(...)
 // Open file for writing profiling information.
#ifndef SIMPLEPROFILERLOWOVERHEAD 

#define OPENSIMPLEPROFILER(string) \
    char siProfname[128]; \
    sprintf(siProfname,"SimpleProfile_%s.log",string); \
    sSiProData.fProfileLog = fopen(siProfname,"w"); \
    if(sSiProData.fProfileLog == NULL) \
    { \
        ERSP_LOG_WARN("Couldn't open SimpleProfile_%s.log for writing",string); \
	    return(1); \
    } \
    fprintf(sSiProData.fProfileLog,"SimpleProfiler, Last compiled: %s, %s\n",__DATE__, __TIME__); \
    fflush(sSiProData.fProfileLog); \
    time_t long_time;                                               \
    ersp_time( &long_time );                                        \
    struct tm *logtime = localtime( &long_time );                   \
    fprintf(sSiProData.fProfileLog,"Invoked by: %s, %s\n",string,asctime(logtime)); \
    fflush(sSiProData.fProfileLog); \
    sSiProData.uiMaxProfilerLevel = SIMPLEPROFILERLEVELDEFAULT; \
    sSiProData.uiCurrentProfilerLevel = 0; \
    sSiProData.uiMaxLogDiffTimeLevel = SIMPLEPROFILERDIFFLEVELMAX; \
    sSiProData.uiLineNumber = 1; \
    CREATEMUTEX \
    sSiProData.dStartTime = GETTIME; \
    pSiProData = &sSiProData;

#else

#define OPENSIMPLEPROFILER(string) \
    sSiProData.dStartTime = GETTIME; \
    sSiProData.uiCurrentBufIndex = 0; \
    sSiProData.uiMaxProfilerLevel = SIMPLEPROFILERLEVELDEFAULT; \
    sSiProData.uiCurrentProfilerLevel = 0; \
    sSiProData.uiMaxLogDiffTimeLevel = SIMPLEPROFILERDIFFLEVELMAX; \
    sSiProData.uiLineNumber = 1; \
    pSiProData = &sSiProData;

#endif


//Include at the end of main.
#ifndef SIMPLEPROFILERLOWOVERHEAD 

#define CLOSESIMPLEPROFILER \
  if(sSiProData.fProfileLog != NULL) \
    { \
        fprintf( sSiProData.fProfileLog,"Closing SimpleProfile.log\n"); \
        fflush( sSiProData.fProfileLog); \
        fclose( sSiProData.fProfileLog); \
    }

#else

#define CLOSESIMPLEPROFILER \
    sSiProData.fProfileLog = fopen("SimpleTime.log","w"); \
    if(sSiProData.fProfileLog == NULL) \
    { \
        ERSP_LOG_WARN("Couldn't open SimpleTime.log for writing"); \
        return(1); \
    } \
    fprintf(sSiProData.fProfileLog,"SimpleTime Log, %s, %s\n",__DATE__, __TIME__); \
    fflush(sSiProData.fProfileLog); \
    unsigned int iProfile; \
    sSiProData.uiCurrentBufIndex--; \
    for(iProfile = 0; iProfile < sSiProData.uiCurrentBufIndex; iProfile++) \
    { \
        fprintf( sSiProData.fProfileLog,"%d-,%d,\n",sSiProData.uiLineNumber++,(unsigned long)(sSiProData.dTimeBuf[iProfile] - sSiProData.dStartTime)); \
    } \
    fprintf( sSiProData.fProfileLog,"Closing SimpleTime.log\n"); \
    fflush( sSiProData.fProfileLog); \
    fclose( sSiProData.fProfileLog); 
  
#endif

#ifndef SIMPLEPROFILERLOWOVERHEAD 

//Start a section,level
#define STARTSIMPLEPROFILERSECTION(string) \
if( pSiProData != NULL) \
{ \
  assert( pSiProData == &sSiProData ); \
  if( pSiProData->uiCurrentProfilerLevel <  pSiProData->uiMaxProfilerLevel) \
  { \
    Timestamp time = GETTIME -  pSiProData->dStartTime; \
     pSiProData->dTimeDiffLevel[pSiProData->uiCurrentProfilerLevel] = time; \
    fprintf( pSiProData->fProfileLog,"%d-S%d: %s, %lu,\n",pSiProData->uiLineNumber++,pSiProData->uiCurrentProfilerLevel,string,(unsigned long)time); \
    fflush( pSiProData->fProfileLog); \
    pSiProData->uiCurrentProfilerLevel++; \
  } \
}

#else

#define STARTSIMPLEPROFILERSECTION(string) \
if( pSiProData != NULL) \
{ \
  if( pSiProData->uiCurrentProfilerLevel <  pSiProData->uiMaxProfilerLevel) \
  { \
    pSiProData->dTimeBuf[pSiProData->uiCurrentBufIndex++]  = GETTIME; \
    pSiProData->uiCurrentProfilerLevel++; \
  } \
}

#endif


//Start a derived section,level
#define STARTDERIVEDSIMPLEPROFILERSECTION(string,time) \
if( pSiProData != NULL) \
{ \
  if( pSiProData->uiCurrentProfilerLevel <  pSiProData->uiMaxProfilerLevel) \
  { \
    Timestamp reltime = time - pSiProData->dStartTime; \
    fprintf( pSiProData->fProfileLog,"%d-S%d: d_%s, %lu,\n",pSiProData->uiLineNumber++,pSiProData->uiCurrentProfilerLevel,string,(unsigned long)reltime); \
    fflush( pSiProData->fProfileLog); \
    pSiProData->uiCurrentProfilerLevel++; \
  } \
}


//End a derived section, do not mismatch
#define ENDDERIVEDSIMPLEPROFILERSECTION(string,time) \
if(pSiProData != NULL) \
{ \
  pSiProData->uiCurrentProfilerLevel--; \
  Timestamp reltime = time - pSiProData->dStartTime; \
  fprintf( pSiProData->fProfileLog,"%d-E%d: d_%s, %lu,\n",pSiProData->uiLineNumber++,pSiProData->uiCurrentProfilerLevel,string,(unsigned long)reltime); \
  fflush( pSiProData->fProfileLog); \
}



#ifndef SIMPLEPROFILERLOWOVERHEAD 

//End a section, do not mismatch
#define ENDSIMPLEPROFILERSECTION(string) \
if(pSiProData != NULL) \
{ \
  if( pSiProData->uiCurrentProfilerLevel > 0 ) \
  { \
    pSiProData->uiCurrentProfilerLevel--; \
    Timestamp time = GETTIME -  pSiProData->dStartTime; \
    pSiProData->dTimeDiffLevel[pSiProData->uiCurrentProfilerLevel] = time -  pSiProData->dTimeDiffLevel[pSiProData->uiCurrentProfilerLevel]; \
    fprintf( pSiProData->fProfileLog,"%d-E%d: %s, %ld,\n",pSiProData->uiLineNumber++,pSiProData->uiCurrentProfilerLevel,string,(unsigned long)time); \
    if(pSiProData->uiCurrentProfilerLevel <=  pSiProData->uiMaxLogDiffTimeLevel) \
    { \
      fprintf(pSiProData->fProfileLog,"%d-L%d: Time diff,0, %ld,\n",pSiProData->uiLineNumber++,pSiProData->uiCurrentProfilerLevel, \
                                        (unsigned long)pSiProData->dTimeDiffLevel[pSiProData->uiCurrentProfilerLevel]); \
    } \
  } \
  else \
  { \
    fprintf( pSiProData->fProfileLog,"Profiling error: ENDSIMPLEPROFILERSECTION called when level = %d. %d-E%d: %s, %ld,\n",pSiProData->uiCurrentProfilerLevel, pSiProData->uiLineNumber++,pSiProData->uiCurrentProfilerLevel,string,(unsigned long)time); \
  } \
  fflush( pSiProData->fProfileLog); \
}

#else

#define ENDSIMPLEPROFILERSECTION(string) \
if( pSiProData != NULL) \
{ \
    pSiProData->uiCurrentProfilerLevel--; \
    pSiProData->dTimeBuf[pSiProData->uiCurrentBufIndex++]  = GETTIME; \
    if(pSiProData->uiCurrentProfilerLevel <=  pSiProData->uiMaxLogDiffTimeLevel) \
    { \
      pSiProData->dTimeBuf[pSiProData->uiCurrentBufIndex++]  = pSiProData->dStartTime + 4000; \
    } \
}

#endif


#ifndef SIMPLEPROFILERLOWOVERHEAD 

//Write the time to log within a section.
#define LOGTIMESIMPLEPROFILER(string) \
if( pSiProData != NULL) \
{ \
  Timestamp time = GETTIME -  pSiProData->dStartTime; \
  fprintf( pSiProData->fProfileLog,"%d-I: %s, %ld,\n",pSiProData->uiLineNumber++,string,(unsigned long)time); \
  fflush( pSiProData->fProfileLog); \
}

#else

#define LOGTIMESIMPLEPROFILER(string) \
if( pSiProData != NULL) \
{ \
  pSiProData->dTimeBuf[pSiProData->uiCurrentBufIndex++]  = GETTIME; \
}

#endif


#ifndef SIMPLEPROFILERLOWOVERHEAD 


#define PRINTSIMPLEPROFILERAR2(string,ar1,ar2) \
if( pSiProData != NULL) \
{ \
  fprintf(pSiProData->fProfileLog,"%d-",pSiProData->uiLineNumber++); \
  fprintf(pSiProData->fProfileLog,string,ar1,ar2); \
  fflush( pSiProData->fProfileLog); \
}

#else
#define PRINTSIMPLEPROFILERAR2(string,ar1,ar2) \
if( pSiProData != NULL) \
{ \
  pSiProData->dTimeBuf[pSiProData->uiCurrentBufIndex++]  = pSiProData->dStartTime + 3000; \
}

#endif

#ifndef SIMPLEPROFILERLOWOVERHEAD 

#define PRINTSIMPLEPROFILERAR1(string,ar1) \
if( pSiProData != NULL) \
{ \
  fprintf(pSiProData->fProfileLog,"%d-",pSiProData->uiLineNumber++); \
  fprintf( pSiProData->fProfileLog,string,ar1); \
  fflush( pSiProData->fProfileLog); \
}

#else

#define PRINTSIMPLEPROFILERAR1(string,ar1) \
if( pSiProData != NULL) \
{ \
  pSiProData->dTimeBuf[pSiProData->uiCurrentBufIndex++]  = pSiProData->dStartTime + 2000; \
}

#endif

#ifndef SIMPLEPROFILERLOWOVERHEAD 

#define PRINTSIMPLEPROFILER(string) \
if( pSiProData != NULL) \
{ \
  fprintf(pSiProData->fProfileLog,"%d-",pSiProData->uiLineNumber++); \
  fprintf( pSiProData->fProfileLog,string); \
  fflush( pSiProData->fProfileLog); \
}

#else
#define PRINTSIMPLEPROFILER(string) \
if( pSiProData != NULL) \
{ \
  pSiProData->dTimeBuf[pSiProData->uiCurrentBufIndex++]  = pSiProData->dStartTime+1000; \
}

#endif


#endif // DOXYGEN_INTERNAL

#endif //INCLUDE_EVOLUTION_SIMPLEPROFILER_HPP
